{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Fastchange documentation! Testing Hello","title":"Home"},{"location":"#welcome-to-the-fastchange-documentation","text":"Testing","title":"Welcome to the Fastchange documentation!"},{"location":"#hello","text":"","title":"Hello"},{"location":"reference/SUMMARY/","text":"fastchange costs base emp exp gamma normal poisson penalties r r seg amoc base binseg pelt","title":"SUMMARY"},{"location":"reference/fastchange/","text":"","title":"fastchange"},{"location":"reference/fastchange/penalties/","text":"aic_penalty ( n , n_params ) Segment cost penalty based on Akaike information criterion (AIC). H. Akaike. \u201cA new look at the statistical model identification\u201d. In: IEEE Transactions on Automatic Control 19.6 (1974), pp. 716-723.doi: 10.1109/TAC.1974.1100705 Parameters: Name Type Description Default n int Number of change points in model (unused). required n_params int Number of parameters estimated in cost function. required Returns: Name Type Description float float Complexity penalty for segment bic_penalty ( n , n_params ) Segment cost penalty based on Bayesian/Schwarz information criterion (BIC/SIC). Gideon Schwarz. \u201cEstimating the Dimension of a Model\u201d. In: The Annals of Statistics 6.2 (1978), pp. 461-464. doi: 10.1214/aos/ 1176344136. url: https://doi.org/10.1214/aos/1176344136 Parameters: Name Type Description Default n int Number of change points in model required n_params int Number of parameters estimated in cost function. required Returns: Name Type Description float float Complexity penalty for segment hq_penalty ( n , n_params ) Segment cost penalty based on Hannan-Quinn information criterion (HQIC). Antonio Aznar Grasa. \u201cIntroduction\u201d. In: Econometric Model Selection: A New Approach. Dordrecht: Springer Netherlands, 1989,pp. 1-4. isbn: 978-94-017-1358-0. doi: 10.1007/978-94-017-1358-0_1. url: https://doi.org/10.1007/978-94-017-1358-0_1 Parameters: Name Type Description Default n int Number of change points in model required n_params int Number of parameters estimated in cost function. required Returns: Name Type Description float float Complexity penalty for segment mbic_penalty ( n , n_params ) Segment cost penalty based on the modified Bayesian information criterion (MBIC). Nancy R. Zhang and David O. Siegmund. \u201cA modified Bayes information criterion with applications to the analysis of comparative genomic hybridization data\u201d. In: Biometrics 63 (2007), pp. 22-32. Parameters: Name Type Description Default n int Number of change points in model required n_params int Number of parameters estimated in cost function. required Returns: Name Type Description float float Complexity penalty for segment","title":"penalties"},{"location":"reference/fastchange/penalties/#fastchange.penalties.aic_penalty","text":"Segment cost penalty based on Akaike information criterion (AIC). H. Akaike. \u201cA new look at the statistical model identification\u201d. In: IEEE Transactions on Automatic Control 19.6 (1974), pp. 716-723.doi: 10.1109/TAC.1974.1100705 Parameters: Name Type Description Default n int Number of change points in model (unused). required n_params int Number of parameters estimated in cost function. required Returns: Name Type Description float float Complexity penalty for segment","title":"aic_penalty()"},{"location":"reference/fastchange/penalties/#fastchange.penalties.bic_penalty","text":"Segment cost penalty based on Bayesian/Schwarz information criterion (BIC/SIC). Gideon Schwarz. \u201cEstimating the Dimension of a Model\u201d. In: The Annals of Statistics 6.2 (1978), pp. 461-464. doi: 10.1214/aos/ 1176344136. url: https://doi.org/10.1214/aos/1176344136 Parameters: Name Type Description Default n int Number of change points in model required n_params int Number of parameters estimated in cost function. required Returns: Name Type Description float float Complexity penalty for segment","title":"bic_penalty()"},{"location":"reference/fastchange/penalties/#fastchange.penalties.hq_penalty","text":"Segment cost penalty based on Hannan-Quinn information criterion (HQIC). Antonio Aznar Grasa. \u201cIntroduction\u201d. In: Econometric Model Selection: A New Approach. Dordrecht: Springer Netherlands, 1989,pp. 1-4. isbn: 978-94-017-1358-0. doi: 10.1007/978-94-017-1358-0_1. url: https://doi.org/10.1007/978-94-017-1358-0_1 Parameters: Name Type Description Default n int Number of change points in model required n_params int Number of parameters estimated in cost function. required Returns: Name Type Description float float Complexity penalty for segment","title":"hq_penalty()"},{"location":"reference/fastchange/penalties/#fastchange.penalties.mbic_penalty","text":"Segment cost penalty based on the modified Bayesian information criterion (MBIC). Nancy R. Zhang and David O. Siegmund. \u201cA modified Bayes information criterion with applications to the analysis of comparative genomic hybridization data\u201d. In: Biometrics 63 (2007), pp. 22-32. Parameters: Name Type Description Default n int Number of change points in model required n_params int Number of parameters estimated in cost function. required Returns: Name Type Description float float Complexity penalty for segment","title":"mbic_penalty()"},{"location":"reference/fastchange/costs/","text":"","title":"costs"},{"location":"reference/fastchange/costs/base/","text":"","title":"base"},{"location":"reference/fastchange/costs/emp/","text":"","title":"emp"},{"location":"reference/fastchange/costs/exp/","text":"","title":"exp"},{"location":"reference/fastchange/costs/gamma/","text":"","title":"gamma"},{"location":"reference/fastchange/costs/normal/","text":"","title":"normal"},{"location":"reference/fastchange/costs/poisson/","text":"","title":"poisson"},{"location":"reference/fastchange/r/","text":"","title":"r"},{"location":"reference/fastchange/r/r/","text":"","title":"r"},{"location":"reference/fastchange/seg/","text":"","title":"seg"},{"location":"reference/fastchange/seg/amoc/","text":"AmocSeg Bases: BaseSeg At-most one change point segmentation method amoc_seg ( cost , sumstats , cost_args , penalty , min_len , max_cps , n ) At-most One Changepoint segmentation algorithm Detects at most one changepoint in a given signal, performing an exhaustive search over all points in a signal, and returning the index (if one exists) that minimizes the cost and penalty functions. Parameters: Name Type Description Default cost Callable [[ int , int , np . ndarray , np . ndarray ], float ] Cost function for segments required sumstats np . ndarray Summary statistics of signal according to cost function required cost_args np . ndarray Arguments to pass to cost function required penalty Callable [[ int , int ], float ] Complexity penalty required min_len int Minimum segment length required max_cps int Maximum number of changepoints to return required n int Number of points in signal required Returns: Type Description np . ndarray np.ndarray: Indices of change points","title":"amoc"},{"location":"reference/fastchange/seg/amoc/#fastchange.seg.amoc.AmocSeg","text":"Bases: BaseSeg At-most one change point segmentation method","title":"AmocSeg"},{"location":"reference/fastchange/seg/amoc/#fastchange.seg.amoc.amoc_seg","text":"At-most One Changepoint segmentation algorithm Detects at most one changepoint in a given signal, performing an exhaustive search over all points in a signal, and returning the index (if one exists) that minimizes the cost and penalty functions. Parameters: Name Type Description Default cost Callable [[ int , int , np . ndarray , np . ndarray ], float ] Cost function for segments required sumstats np . ndarray Summary statistics of signal according to cost function required cost_args np . ndarray Arguments to pass to cost function required penalty Callable [[ int , int ], float ] Complexity penalty required min_len int Minimum segment length required max_cps int Maximum number of changepoints to return required n int Number of points in signal required Returns: Type Description np . ndarray np.ndarray: Indices of change points","title":"amoc_seg()"},{"location":"reference/fastchange/seg/base/","text":"BaseSeg Base class for all segmentation methods __init__ ( cost , penalty = 0.0 , min_len = 1 , max_cps =- 1 ) Initialization method Parameters: Name Type Description Default cost BaseCost Cost function for segmentation required penalty float Complexity penalty. Defaults to 0.0. 0.0 min_len int Minimum segment length. Defaults to 1. 1 max_cps int Maximum number of change points. Defaults to -1. -1 fit ( y ) Find all change points in a signal Parameters: Name Type Description Default y np . ndarray Signal in which to detect change points required predict () Get array of change point indices Returns: Type Description np . ndarray np.ndarray: Change point indices in given signal seg_sig ( * args ) Numba signature definition for segmentation functions Parameters: Name Type Description Default *args nb . types . Type Additional argument types () Returns: Name Type Description Signature 'Signature' Numba function signature","title":"base"},{"location":"reference/fastchange/seg/base/#fastchange.seg.base.BaseSeg","text":"Base class for all segmentation methods","title":"BaseSeg"},{"location":"reference/fastchange/seg/base/#fastchange.seg.base.BaseSeg.__init__","text":"Initialization method Parameters: Name Type Description Default cost BaseCost Cost function for segmentation required penalty float Complexity penalty. Defaults to 0.0. 0.0 min_len int Minimum segment length. Defaults to 1. 1 max_cps int Maximum number of change points. Defaults to -1. -1","title":"__init__()"},{"location":"reference/fastchange/seg/base/#fastchange.seg.base.BaseSeg.fit","text":"Find all change points in a signal Parameters: Name Type Description Default y np . ndarray Signal in which to detect change points required","title":"fit()"},{"location":"reference/fastchange/seg/base/#fastchange.seg.base.BaseSeg.predict","text":"Get array of change point indices Returns: Type Description np . ndarray np.ndarray: Change point indices in given signal","title":"predict()"},{"location":"reference/fastchange/seg/base/#fastchange.seg.base.seg_sig","text":"Numba signature definition for segmentation functions Parameters: Name Type Description Default *args nb . types . Type Additional argument types () Returns: Name Type Description Signature 'Signature' Numba function signature","title":"seg_sig()"},{"location":"reference/fastchange/seg/binseg/","text":"BinSeg Bases: BaseSeg Binary segmentation method binary_seg ( cost , sumstats , cost_args , penalty , min_len , max_cps , n ) Binary segmentation algorithm Recursively identifies change points in a signal and on each resulting subsignal, until the no more change points are discovered or we find the max number of change points. Note this method is not exact, as change point indices may not be globally optimal, but is faster than exact methods like PELT. A. J. Scott and M. Knott. \u201cA Cluster Analysis Method for Grouping Means in the Analysis of Variance\u201d. In: Biometrics 30.3 (1974), pp. 507-512. issn: 0006341X, 15410420. url: http://www.jstor.org/stable/2529204 (visited on 04/23/2022) Parameters: Name Type Description Default cost Callable [[ int , int , np . ndarray , np . ndarray ], float ] Cost function for segments required sumstats np . ndarray Summary statistics of signal according to cost function required cost_args np . ndarray Arguments to pass to cost function required penalty Callable [[ int , int ], float ] Complexity penalty required min_len int Minimum segment length required max_cps int Maximum number of changepoints to return required n int Number of points in signal required Returns: Type Description np . ndarray np.ndarray: Indices of change points","title":"binseg"},{"location":"reference/fastchange/seg/binseg/#fastchange.seg.binseg.BinSeg","text":"Bases: BaseSeg Binary segmentation method","title":"BinSeg"},{"location":"reference/fastchange/seg/binseg/#fastchange.seg.binseg.binary_seg","text":"Binary segmentation algorithm Recursively identifies change points in a signal and on each resulting subsignal, until the no more change points are discovered or we find the max number of change points. Note this method is not exact, as change point indices may not be globally optimal, but is faster than exact methods like PELT. A. J. Scott and M. Knott. \u201cA Cluster Analysis Method for Grouping Means in the Analysis of Variance\u201d. In: Biometrics 30.3 (1974), pp. 507-512. issn: 0006341X, 15410420. url: http://www.jstor.org/stable/2529204 (visited on 04/23/2022) Parameters: Name Type Description Default cost Callable [[ int , int , np . ndarray , np . ndarray ], float ] Cost function for segments required sumstats np . ndarray Summary statistics of signal according to cost function required cost_args np . ndarray Arguments to pass to cost function required penalty Callable [[ int , int ], float ] Complexity penalty required min_len int Minimum segment length required max_cps int Maximum number of changepoints to return required n int Number of points in signal required Returns: Type Description np . ndarray np.ndarray: Indices of change points","title":"binary_seg()"},{"location":"reference/fastchange/seg/pelt/","text":"PeltSeg Bases: BaseSeg Pruned exact linear time segmentation algorithm pelt_seg ( cost , sumstats , cost_args , penalty , min_len , max_cps , n ) Pruned exact linear time segmentation algorithm Exact method for detecting multiple change points in a signal in linear time. R. Killick, P. Fearnhead, and I. A. Eckley. \u201cOptimal Detection of Changepoints With a Linear Computational Cost\u201d. In: Journal of the American Statistical Association 107.500 (2012), pp. 1590-1598. doi: 10.1080/01621459.2012.737745. eprint: https://doi.org/ 10.1080/01621459.2012.737745. url: https://doi.org/10.1080/01621459.2012.737745 Parameters: Name Type Description Default cost Callable [[ int , int , np . ndarray , np . ndarray ], float ] Cost function for segments required sumstats np . ndarray Summary statistics of signal according to cost function required cost_args np . ndarray Arguments to pass to cost function required penalty Callable [[ int , int ], float ] Complexity penalty required min_len int Minimum segment length required max_cps int Maximum number of changepoints to return required n int Number of points in signal required Returns: Type Description np . ndarray np.ndarray: Indices of change points","title":"pelt"},{"location":"reference/fastchange/seg/pelt/#fastchange.seg.pelt.PeltSeg","text":"Bases: BaseSeg Pruned exact linear time segmentation algorithm","title":"PeltSeg"},{"location":"reference/fastchange/seg/pelt/#fastchange.seg.pelt.pelt_seg","text":"Pruned exact linear time segmentation algorithm Exact method for detecting multiple change points in a signal in linear time. R. Killick, P. Fearnhead, and I. A. Eckley. \u201cOptimal Detection of Changepoints With a Linear Computational Cost\u201d. In: Journal of the American Statistical Association 107.500 (2012), pp. 1590-1598. doi: 10.1080/01621459.2012.737745. eprint: https://doi.org/ 10.1080/01621459.2012.737745. url: https://doi.org/10.1080/01621459.2012.737745 Parameters: Name Type Description Default cost Callable [[ int , int , np . ndarray , np . ndarray ], float ] Cost function for segments required sumstats np . ndarray Summary statistics of signal according to cost function required cost_args np . ndarray Arguments to pass to cost function required penalty Callable [[ int , int ], float ] Complexity penalty required min_len int Minimum segment length required max_cps int Maximum number of changepoints to return required n int Number of points in signal required Returns: Type Description np . ndarray np.ndarray: Indices of change points","title":"pelt_seg()"}]}